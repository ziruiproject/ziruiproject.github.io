[{"content":"üí° Petunjuk Umum Kerjakan menggunakan bahasa pemrograman Java Tambahkan komentar untuk menjelaskan program Tulislah kode dengan rapi Program harus memenuhi Kriteria Penyelesaian Jika pakai AI (ChatGPT, Deepseek, dll), nilai 0 üìò Istilah Umum Class: adalah cetakan / template dari suatu object Object: adalah class yang sudah dibuat Attribute: adalah nilai yang disimpan di dalam class Contructor: adalah method yang bertanggung jawab untuk membuat object. Method ini akan dijalankan paling pertama saat membuat object Soal 1 Perintah Buatlah class Mahasiswa sehingga dapat dipanggil seperti contoh dibawah:\n1 2 3 4 5 6 7 8 9 10 11 12 13 class Main { public static void main(String[] args) { Mahasiswa mahasiswa = new Mahasiswa() .setNama(\u0026#34;Yudha Prawira Sugiharto\u0026#34;) .setKampus(\u0026#34;Technische Universit√§t M√ºnchen\u0026#34;) .setFakultas(\u0026#34;School of Computation, Information, and Technology\u0026#34;) .setJurusan(\u0026#34;Computer Science\u0026#34;) .setNrp(500_223_000) .setIpk(4.0f); mahasiswa.info(); } } Contoh Output Kriteria Penyelesaian Program harus mempuyai 2 class, yaitu Main dan Mahasiswa Class Mahasiswa harus bisa dipanggil didalam Main Main method hanya ada pada class Main Program dapat dipanggil sesuai dengan contoh Method info() akan menghasilkan output seperti pada contoh Boleh menambahkan Method bantuan Soal 2 Perintah Pada soal 1, attribute bisa bernilai null jika tidak diisi. Dengan menggunakan jawaban soal 1, buatlah agar attribute tidak bisa bernilai null. Bisa dengan melempar exception atau dengan memberi default value.\nKeriteria Penyelesaian Program diambil dari jawaban Soal 1 Semua attribute tidak bisa bernilai null Khusus NRP, buatlah agar digitnya minimal 9 Boleh menambahkan method bantuan Soal 3 Perintah Menggunakan Jawaban soal 2, tambahkan class Alamat agar bisa dipanggil seperti contoh dibawah:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Main { public static void main(String[] args) { Mahasiswa mahasiswa = new Mahasiswa() .setNama(\u0026#34;Yudha Prawira Sugiharto\u0026#34;) .setKampus(\u0026#34;Technische Universit√§t M√ºnchen\u0026#34;) .setFakultas(\u0026#34;School of Computation, Information, and Technology\u0026#34;) .setJurusan(\u0026#34;Computer Science\u0026#34;) .setNrp(500_223_000) .setIpk(4.0f); mahasiswa.info(); Alamat alamat = new Alamat( \u0026#34;Arcisstra√üe 21\u0026#34;, \u0026#34;M√ºnchen\u0026#34;, \u0026#34;Bayern\u0026#34;, \u0026#34;80333\u0026#34; ); mahasiswa.setAlamat(alamat); mahasiswa.info(); } } Contoh Output Kriteria Penyelesaian Program diambil dari jawaban Soal 2 Program memiliki 3 classs, yaitu Mahasiswa, Main, Alamat Class Alamat memiliki 4 attribute, yaitu jalan, kota, provinsi, dan kode pos Class Alamat memiliki constructor berparameter Alamat tidak boleh kosong, jika kosong, lempar exception atau berikan default value Boleh menambahkan method bantuan üóìÔ∏è Deadline Tugas ini harus dikumpulkan paling lambat pada:\nüìÖ Hari/Tanggal: Kamis, 15 Mei 2025 ‚è∞ Pukul: 18:00 WIB\nPengumpulan dilakukan melalui MyITS Classroom\n‚õî Catatan: Tugas yang terlambat, hanya dapat nilai maksimal 50 saja\n","date":"2025-05-04T07:48:41Z","image":"https://ziruiproject.github.io/post/tugas-praktikum-5/cover_hu_47c2fc3826f02001.png","permalink":"https://ziruiproject.github.io/post/tugas-praktikum-5/","title":"Tugas Praktikum 5"},{"content":"Object Oriented Programming Pengertian Object Oriented Programming (OOP) secara literal berarti Pemrograman Berorientasi Object (PBO), adalah sudut pandang bahasa pemrorgaman yang berkonsep \u0026ldquo;object\u0026rdquo;.\nKarakteristik Umum Secara umum, bahasa pemrograman disebut OOP jika memenuhi kriteria berikut:\nBerbasis objek dan class Ada konsep properti dan method Ada relasi antar objek Fokus pada representasi dunia nyata Class Pengertian Ciri-ciri utama dalam bahasa yang mendukung OOP adalah adanya class. Class adalah template atau cetakan. Apa yang dimaksud dari cetakan disini? Nanti kamu akan lihat pada point berikutnya.\nContoh Class 1 2 3 class Mahasiswa { } Perhatikan bahwa dalam menamakan class, ada baiknya menggunakan format CamelCase yaitu huruf awal setiap kata dibuat kapital.\nContoh penamaan yang benar\n1 2 3 class UserProfile { } Contoh penamaan yang salah\n1 2 3 class userprofile { // atau userProfile juga salah } Field Class dapat menyimpan nilai atau yang dikenal sebagai field/attribute/properties (ketiga itu sama saja).\n1 2 3 4 5 6 class Mahasiswa { String nama; int nrp; float ipk; final String KAMPUS = \u0026#34;ITS\u0026#34;; } Perhatikan bahwa saat suatu Field itu final / konstan, maka nama Field ditulis kapital.\nMethod Class juga dapat menyimpan \u0026ldquo;kemampuan\u0026rdquo; atau \u0026ldquo;behavior\u0026rdquo; dengan cara membuat method.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Mahasiswa { String nama; int nrp; float ipk; final String KAMPUS = \u0026#34;ITS\u0026#34;; void info() { System.out.println(\u0026#34;Nama: \u0026#34; + name); System.out.println(\u0026#34;NRP: \u0026#34; + nrp); System.out.println(\u0026#34;IPK: \u0026#34; + ipk); System.out.println(\u0026#34;Kampus: \u0026#34; + KAMPUS); } String getName() { return name; } int getNRP() { return nrp; } // Silahkan lengkapi sisanya } This Adakalanya nama Field kamu sama dengan nama parameter atau nama variable yang lain.\nContohnya:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Mahasiswa { String nama; int nrp; float ipk; final String KAMPUS = \u0026#34;ITS\u0026#34;; void info() { System.out.println(\u0026#34;Nama: \u0026#34; + name); System.out.println(\u0026#34;NRP: \u0026#34; + nrp); System.out.println(\u0026#34;IPK: \u0026#34; + ipk); System.out.println(\u0026#34;Kampus: \u0026#34; + KAMPUS); } String getName() { return name; } int getNRP() { return nrp; } String setName(String name) { name = name; // ini tidak berhasil } // Silahkan lengkapi sisanya } Untuk menghindari kebingungan tersebut, Java menyediakan keyword this\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Mahasiswa { String nama; int nrp; float ipk; final String KAMPUS = \u0026#34;ITS\u0026#34;; void info() { System.out.println(\u0026#34;Nama: \u0026#34; + name); System.out.println(\u0026#34;NRP: \u0026#34; + nrp); System.out.println(\u0026#34;IPK: \u0026#34; + ipk); System.out.println(\u0026#34;Kampus: \u0026#34; + KAMPUS); } String getName() { return name; } int getNRP() { return nrp; } void setName(String name) { // this.name merujuk pada Field name this.name = name; } void setNRP(int nrp) { this.nrp = nrp; } // Silahkan lengkapi sisanya } Object Pengertian Saat membahas Object Oriented Programming, sudah pasti membahas tentang Object. Apa itu object? Object adalah hasil dari class. Jika diibaratkan sebuah kue, maka class adalah cetakan kue, dan object adalah kue nya.\nMembuat Object Class Mahasiswa sebelumnya bisa dibuat menjadi object Mahasiswa dengan cara berikut:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Main { public static void main(String[] args) { // Membuat object Mahasiswa Mahasiswa mahasiswa1 = new Mahasiswa() } } class Mahasiswa { String nama; int nrp; float ipk; final String KAMPUS = \u0026#34;ITS\u0026#34;; void info() { System.out.println(\u0026#34;Nama: \u0026#34; + name); System.out.println(\u0026#34;NRP: \u0026#34; + nrp); System.out.println(\u0026#34;IPK: \u0026#34; + ipk); System.out.println(\u0026#34;Kampus: \u0026#34; + KAMPUS); } String getName() { return name; } int getNRP() { return nrp; } void setName(String name) { this.name = name; } void setNRP(int nrp) { this.nrp = nrp; } // Silahkan lengkapi sisanya } Mengakses Field dan Method Object automatis memiliki Field dan method yang ada dalam Class. Sebagaimana kue yang dibuat dengan cetakan kue pasti mengikuti bentuk cetakannya.\nKamu bisa mengakses Field dan method dengan menggunakan (.) titik.\n1 2 3 4 5 6 7 8 9 10 class Main { public static void main(String[] args) { // Membuat object Mahasiswa Mahasiswa mahasiswa1 = new Mahasiswa(); // Mengakses Field System.out.println(mahasiswa1.ipk); // Mengakses method mahasiswa1.info(); } } Constructor Pengertian Constructor adalah method spesial. Kenapa spesial? Karena constructor adalah method yang bertanggung jawab untuk membuat object.\nMembuat Constructor Constructor memiliki nama yang sama dengan nama class nya. Misalnya dalam class Mahasiswa, maka nama constructornya adalah Mahasiswa().\nSecara default (bawaan), setiap class dalam Java sudah memiliki consctrutor kosong seperti berikut.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Mahasiswa { String nama; int nrp; float ipk; final String KAMPUS = \u0026#34;ITS\u0026#34;; // Ini constructor Mahasiswa() { } void info() { System.out.println(\u0026#34;Nama: \u0026#34; + name); System.out.println(\u0026#34;NRP: \u0026#34; + nrp); System.out.println(\u0026#34;IPK: \u0026#34; + ipk); System.out.println(\u0026#34;Kampus: \u0026#34; + KAMPUS); } String getName() { return name; } int getNRP() { return nrp; } void setName(String name) { this.name = name; } void setNRP(int nrp) { this.nrp = nrp; } // Silahkan lengkapi sisanya } Constructor dengan Parameter Karena constructor adalah method, kamu bisa memberikan parameter di constructor.\nContoh:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Mahasiswa { String nama; int nrp; float ipk; final String KAMPUS = \u0026#34;ITS\u0026#34;; // Ini constructor dengan parameter Mahasiswa(String name) { this.name = name; } void info() { System.out.println(\u0026#34;Nama: \u0026#34; + name); System.out.println(\u0026#34;NRP: \u0026#34; + nrp); System.out.println(\u0026#34;IPK: \u0026#34; + ipk); System.out.println(\u0026#34;Kampus: \u0026#34; + KAMPUS); } String getName() { return name; } int getNRP() { return nrp; } void setName(String name) { this.name = name; } void setNRP(int nrp) { this.nrp = nrp; } // Silahkan lengkapi sisanya } Memanggil Constructor dengan Parameter Cara menggunakan contructor dengan parameter adalah sebagai berikut:\n1 2 3 4 5 6 7 8 9 10 class Main { public static void main(String[] args) { // Membuat object Mahasiswa dengan constructor ber-parameter Mahasiswa mahasiswa1 = new Mahasiswa(\u0026#34;Bin Laden\u0026#34;); // Mengakses Field System.out.println(mahasiswa1.ipk); // Mengakses method mahasiswa1.info(); } } Constructor Overloading Sama seperti method, constructor juga mendukung overloading, yaitu beberapa method yang sama dengan parameter (bisa jumlah atau tipe data) yang berbeda.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Mahasiswa { String nama; int nrp; float ipk; final String KAMPUS = \u0026#34;ITS\u0026#34;; // Sudah ada constructor (tanpa parameter) Mahasiswa() { } // Tapi ada lagi constructor lain (dengan parameter) Mahasiswa(String name) { this.name = name; } // Ada lagi constructor lain dengan parameter, namun jumlah parameternya berbeda Mahasiswa(String name, int nrp, float ipk) { this.name = name; this.nrp = nrp; this.ipk = ipk; } void info() { System.out.println(\u0026#34;Nama: \u0026#34; + name); System.out.println(\u0026#34;NRP: \u0026#34; + nrp); System.out.println(\u0026#34;IPK: \u0026#34; + ipk); System.out.println(\u0026#34;Kampus: \u0026#34; + KAMPUS); } String getName() { return name; } int getNRP() { return nrp; } void setName(String name) { this.name = name; } void setNRP(int nrp) { this.nrp = nrp; } // Silahkan lengkapi sisanya } Memanggil Constructor dengan Overloading Cara menggunakan contructor dengan overloading adalah sebagai berikut:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Main { public static void main(String[] args) { // Constructor tanpa parameter Mahasiswa mahasiswa1 = new Mahasiswa(); // Constructor dengan 1 Parameter Mahasiswa mahasiswa2 = new Mahasiswa(\u0026#34;Mega Toto Walala Tibebe\u0026#34;); // Constructor dengan 1 Parameter Mahasiswa mahasiswa3 = new Mahasiswa(\u0026#34;Enikaen\u0026#34;, 5000000911, 2.3f); // Mengakses Field System.out.println(mahasiswa1.ipk) // Mengakses method mahasiswa1.info() } } Memanggil Constructor Lain Constructor dapat memanggil constructor lain dengan menggunakan kata kunci this.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class Mahasiswa { String nama; int nrp; float ipk; final String KAMPUS = \u0026#34;ITS\u0026#34;; // Memanggil constructor lain dengan kata kunci this Mahasiswa() { this(\u0026#34;Mahasiswa Misterius\u0026#34;); } Mahasiswa(String name) { this.name = name; } Mahasiswa(String name, int nrp, float ipk) { this.name = name; this.nrp = nrp; this.ipk = ipk; } void info() { System.out.println(\u0026#34;Nama: \u0026#34; + name); System.out.println(\u0026#34;NRP: \u0026#34; + nrp); System.out.println(\u0026#34;IPK: \u0026#34; + ipk); System.out.println(\u0026#34;Kampus: \u0026#34; + KAMPUS); } String getName() { return name; } int getNRP() { return nrp; } void setName(String name) { this.name = name; } void setNRP(int nrp) { this.nrp = nrp; } // Silahkan lengkapi sisanya } Static Pengertian Pasti kamu sudah sering mendengar kata static. Seluruh Field dan method di dalam class akan terikat ke object. Artinya, kamu perlu membuat object terlebih dahulu untuk mengakses Field atau method nya.\nDengan static kamu bisa mengakses Field dan method tersebut secara langsung dari class nya tanpa harus membuat object terlebih dahulu.\nNamun konsekuensinya adalah Field atau method yang static hanya terikat kepada class bukan ke object, dan Field atau method yang static hanya bisa mengakses sesuatu yang static pula.\nPenggunaan Static Cara penggunaan static seperti berikut:\nStatic Field 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Mahasiswa { String nama; int nrp; float ipk; // Membuat Field menjadi static static final String KAMPUS = \u0026#34;ITS\u0026#34;; } class Main { public static void main(String[] args) { // Memanggil Field yang statiic System.out.println(Mahasiswa.KAMPUS); // Akan menghasilkan \u0026#34;ITS\u0026#34; } } Static Method 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Mahasiswa { String nama; int nrp; float ipk; static final String KAMPUS = \u0026#34;ITS\u0026#34;; static void tempatKuliah() { System.out.println(\u0026#34;Tempat Kuliah di: \u0026#34; + ); } } class Main { public static void main(String[] args) { System.out.println(Mahasiswa.KAMPUS) ; Mahasiswa.tempatKuliah(); } } Primitive vs Non Primitive Tipe data dalam Java dibagi menjadi dua kategori, yaitu Primitive dan Non Primitive.\nSeharusnya kamu sudah tau bahwa di Java ada beberapa tipe data seperti: int, double, String, char, boolean, dan lain-lain. Jika diperhatikan, semua tipe data tersebut dituis dengan huruf kecil, kecuali String. Tapi kenapa?\nPrimitive Tipe data Primitive adalah tipe data bukan object. Contohnya int, double, boolean, float, char, dan lain-lain yang berawal huruf kecil.\nTipe data primitive selalu mempunyai default value (nilai awal jika tidak diisi), seperti int misalnya yang jika tidak diisi maka akan menghasilkan 0.\nKarena bukan object, tipe data Primitive tidak mempunyai field ataupun method.\nTipe Data Ukuran (bit) Nilai Minimum Nilai Maksimum Default Value byte 8 -128 127 0 short 16 -32,768 32,767 0 int 32 -2^31 (-2,147,483,648) 2^31-1 (2,147,483,647) 0 long 64 -2^63 2^63-1 0L float 32 ~1.4e-45 ~3.4e+38 0.0f double 64 ~4.9e-324 ~1.8e+308 0.0d char 16 \u0026lsquo;\\u0000\u0026rsquo; (0) \u0026lsquo;\\uffff\u0026rsquo; (65,535) \u0026lsquo;\\u0000\u0026rsquo; boolean 1 false true false Non Primitive Kebalikan dari Primitive, tipe data Non Primitive merupakan Object. Contohnya adalah String. Tapi kenapa ditulis dengan huruf awal yang kapital?\nIngat bahwa saat menulis class, sangat dianjurkan untuk menulisnya dengan huruf awal setiap kata berupa kapital. Sehingga String (yang merupakan class) ditulis dengan huruf awal yang kapital.\nKarena tipe data Non Primitive merupakah Object, maka tipe data ini memiliki Field dan Method. Namun, jika tidak diisi, nilai awalnya adalah null.\nTipe Data Deskripsi Contoh Penggunaan Default Value String Kumpulan karakter (objek dari class String) String nama = \u0026quot;Yudha\u0026quot;; null Array Kumpulan elemen bertipe sama (juga merupakan objek) int[] angka = {1, 2, 3}; null Class Blueprint untuk membuat objek custom Mahasiswa mhs = new Mahasiswa(); null Interface Kontrak/struktur perilaku yang harus diimplementasikan oleh class lain Runnable r = new MyRunnable(); null Enum Tipe khusus yang menyimpan nilai konstan Hari h = Hari.SENIN; null Record (sejak Java 14) Struktur data immutable dan ringan record Point(int x, int y) {} null ","date":"2025-05-01T14:26:29Z","image":"https://ziruiproject.github.io/post/materi-praktikum-5/cover_hu_8c4c44c7e0f0d0f3.png","permalink":"https://ziruiproject.github.io/post/materi-praktikum-5/","title":"Materi Praktikum 5"},{"content":"Error Pengertian Error adalah kesalahan dalam program. Kesalahan ini dapat menyebabkan program tidak berjalan sebagaimana mestinya.\nAda beberapa jenis error yang perlu diketahui, yaitu:\nSyntax Error Pengertian Sebagaimana bahasa manusia, bahasa pemrograman juga memiliki tata bahasanya (grammar) sendiri. Grammar dalam bahasa pemrograman disebut Syntax. Jika kamu melanggar Grammar ini, maka program akan menampilkan error yang disebut Syntax Error.\nContoh 1 2 3 // Contoh Syntax Error string Nama = \u0026#34;Yudha\u0026#34;; int Usia = 17 Kode diatas mengandung Syntax Error. Error pertama yaitu pada baris pertama, kata string seharusnya ditulis String. Perhatikan bahwa perbedaan kapital saja berpengaruh pada Syntax Error.\nKemudian kesahalan selanjutnya ada pada baris kedua. Diujung baris, tidak diberi tanda titik koma (;). Sehingga kode yang benar adalah\n1 2 String Nama = \u0026#34;Yudha\u0026#34;; int Usia = 17; Penanganan Syntax error mudah ditangani karena langsung terdeteksi oleh editor seperti NetBeans, VSCode, dan IntelliJ sebelum program di-running.\nLogical Error Pengertian Logical Error adalah kesalahan logika, biasanya akan menghasilkan output yang salah padahal tidak ada Error.\nContoh 1 2 int luas = panjang + lebar; // Dijumlah System.out.println(luas); Pada kode di atas, progam tidak akan menampilkan error, namun akan mengeluarkan output yang salah. Hal itu terjadi karena ada kesalahan logika saat menghitung luas, seharusnya luas dihitung dengan rumus panjang * lebar bukan panjang + lebar.\nKode yang benar seharusnya\n1 2 int luas = panjang * lebar; // Dikali System.out.println(luas); Penanganan Cara menangani Logical Error bisa dengan mengecek program langkah demi langkah, mencoba dengan input lain, dan yang terpenting adalah teliti dengan kode yang sudah ditulis.\nRuntime Error Pengertian Runtime Error adalah error yang terjadi saat program sedang berjalan. Biasa terjadi karena ada input yang tidak sesuai (misalnya memasukan huruf ke dalam integer), mengakses object yang null, atau mengakses array diluar index-nya.\nContoh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import java.util.Scanner; public class InputIntegerSimple { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\u0026#34;PROGRAM INPUT INTEGER SEDERHANA\u0026#34;); System.out.println(\u0026#34;-------------------------------\u0026#34;); System.out.print(\u0026#34;Masukkan sebuah bilangan bulat: \u0026#34;); int number = scanner.nextInt(); // Akan error jika input bukan integer System.out.println(\u0026#34;\\nHasil:\u0026#34;); System.out.println(\u0026#34;Anda memasukkan: \u0026#34; + number); System.out.println(\u0026#34;Kuadratnya: \u0026#34; + (number * number)); System.out.println(\u0026#34;Bilangan ini adalah \u0026#34; + (number % 2 == 0 ? \u0026#34;genap\u0026#34; : \u0026#34;ganjil\u0026#34;)); scanner.close(); } } Program diatas akan mati (error) jika kamu meng-input string / huruf.\nPenanganan Fokus utama dalam menangani Runtime Error adalah program tidak boleh mati. Meskipun terjadi error, program harus mampu menangani error tersebut sehingga bisa tetap berjalan. Penanganan ini disebut Exception Handling.\nException Pengertian Di Java, macam-macam kesalahan saat Runtime Error yang masih bisa ditangani direpresentasikan dengan istilah Exception.\nJenis-Jenis Ada banyak jenis Exception, contohnya sebagai berikut:\nException Kegunaan / Deskripsi Exception Merupakan kelas induk dari semua exception di Java. Menangani kesalahan umum yang terjadi di runtime. NullPointerException Terjadi saat mencoba menggunakan objek yang bernilai null ArrayIndexOutOfBoundsException Index array diakses melebihi batas ArithmeticException Kesalahan dalam operasi matematika, seperti pembagian dengan nol NumberFormatException Gagal mengubah string ke angka karena format tidak valid IllegalArgumentException Parameter tidak valid diberikan ke sebuah method IOException Terjadi saat kesalahan input/output, seperti membaca/menulis file FileNotFoundException File yang dicari tidak ditemukan ClassCastException Gagal dalam konversi tipe objek secara eksplisit InterruptedException Terjadi saat thread yang sedang berjalan terganggu (biasanya saat sleep atau wait) Kegunaan Exception sangat berguna untuk mencegah program agar tidak mati saat terjadi Runtime Error.\nException Handling Pengertian Saat program mengalami Runtime Error, program akan \u0026ldquo;melempar\u0026rdquo; Exception terkait, lalu Exception yang dilempar tadi bisa \u0026ldquo;ditangkap\u0026rdquo; lalu diproses, sehingga program tidak mati. Mekanisme ini disebut Exception Handling.\nTry Catch Untuk menangkap Exception, kamu perlu menggunakan try-catch expression.\nPenggunaan Dasar Try Catch Try berisi kode yang berpotensi \u0026ldquo;melempar\u0026rdquo; Exception, sedangkan Catch berisi kode yang \u0026ldquo;menangkap\u0026rdquo; Exception.\nContohnya:\n1 2 3 4 5 6 7 8 public static void main(String[] args) { try { int result = 10 / 0; // Berpotensi \u0026#34;melempar\u0026#34; Exception } catch (Exception e) { // Menangkap Exception // Memproses Exception System.out.println(\u0026#34;Terjadi kesalahan: \u0026#34; + e.getMessage()); } } Exception pada kode di atas dapat diubah menjadi jenis Exception lain seperti pada tabel sebelumnya.\nContohnya:\n1 2 3 4 5 6 7 8 9 10 public static void main(String[] args) { try { // Berpotensi \u0026#34;melempar\u0026#34; Exception // Exception yang akan terjadi adalah Kesalahan Aritmatik (karena pembagian 0) int result = 10 / 0; } catch (ArithmeticException e) { // Menangkap Exception Khusus Aritmatik // Memproses Exception System.out.println(\u0026#34;Terjadi kesalahan aritmatika: \u0026#34; + e.getMessage()); } } Multiple Catch Block Di program sebelumnya, program hanya melempar satu Exception saja, padahal suatu program bisa saja melempar banyak Exception.\nContohnya:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 public static void main(String[] args) { // Menyebabkan beberapa jenis exception try { String str = null; // NullPointerException System.out.println(str.length()); // ArithmeticException int result = 10 / 0; String[] arr = new String[2]; // ArrayIndexOutOfBoundsException System.out.println(arr[5]); } // Menangkap NullPointerException catch (NullPointerException e) { System.out.println(\u0026#34;Terjadi kesalahan: \u0026#34; + e.getMessage()); } // Menangkap ArithmeticException catch (ArithmeticException e) { System.out.println(\u0026#34;Terjadi kesalahan aritmatika: \u0026#34; + e.getMessage()); } // Menangkap ArrayIndexOutOfBoundsException catch (ArrayIndexOutOfBoundsException e) { System.out.println(\u0026#34;Indeks array tidak valid: \u0026#34; + e.getMessage()); } // Menangkap semua jenis Exception lainnya (seperti else) catch (Exception e) { System.out.println(\u0026#34;Terjadi kesalahan lain yang tidak terduga: \u0026#34; + e.getMessage()); } } Finally Selain try-catch, kamu bisa menambahkan blok Finally. Blok ini akan selalu dijalankan baik terjadi Exception ataupun tidak.\nContohnya:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public static void main(String[] args) { // Menyebabkan beberapa jenis exception try { String str = null; // NullPointerException System.out.println(str.length()); // ArithmeticException int result = 10 / 0; String[] arr = new String[2]; // ArrayIndexOutOfBoundsException System.out.println(arr[5]); } // Menangkap NullPointerException catch (NullPointerException e) { System.out.println(\u0026#34;Terjadi kesalahan: \u0026#34; + e.getMessage()); } // Menangkap ArithmeticException catch (ArithmeticException e) { System.out.println(\u0026#34;Terjadi kesalahan aritmatika: \u0026#34; + e.getMessage()); } // Menangkap ArrayIndexOutOfBoundsException catch (ArrayIndexOutOfBoundsException e) { System.out.println(\u0026#34;Indeks array tidak valid: \u0026#34; + e.getMessage()); } // Menangkap semua jenis Exception lainnya (seperti else) catch (Exception e) { System.out.println(\u0026#34;Terjadi kesalahan lain yang tidak terduga: \u0026#34; + e.getMessage()); } // Ini akan selalu dieksekusi apapun yang terjadi finally { System.out.println(\u0026#34;Blok finally dieksekusi: proses selesai.\u0026#34;); } Throw and Throws Throw dan Throws digunakan untuk melempar Exception.\nThrow Digunakan untuk melempar Exception secara manual. Digunakan jika kita ingin sengaja memunculkan error.\nPenggunaan Throw Secara umum, Throw bisa ditulis seperti berikut:\n1 throw new Exception(\u0026#34;Pesan error\u0026#34;); Contoh pengguaan:\n1 2 3 4 5 6 public static void main(String[] args) { int usia = 15; if (usia \u0026lt; 13) { throw new IllegalArgumentException(\u0026#34;Usia harus 13 tahun ke atas.\u0026#34;); } } Throws Throws dengan s digunakan untuk menandai bahwa suatu method bisa melempar Exception.\nPenggunaan Throws Secara umum, Throws bisa ditulis seperti berikut:\n1 2 3 public void namaMethod() throws Exception { // kode yang bisa menyebabkan exception } Contoh penggunaan:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class ValidasiPassword { // Method untuk memeriksa apakah password valid public static void periksaPassword(String password) throws IllegalArgumentException { if (password == null || password.length() \u0026lt; 8) { throw new IllegalArgumentException(\u0026#34;Password harus minimal 8 karakter dan tidak kosong.\u0026#34;); } System.out.println(\u0026#34;Password valid: \u0026#34; + password); } public static void main(String[] args) { try { periksaPassword(\u0026#34;12345\u0026#34;); // Password terlalu pendek } catch (IllegalArgumentException e) { System.out.println(\u0026#34;Terjadi kesalahan validasi: \u0026#34; + e.getMessage()); } try { periksaPassword(\u0026#34;rahasia123\u0026#34;); // Password valid } catch (IllegalArgumentException e) { System.out.println(\u0026#34;Terjadi kesalahan validasi: \u0026#34; + e.getMessage()); } } } ","date":"2025-04-14T06:13:17Z","image":"https://ziruiproject.github.io/post/materi-praktikum-4/cover_hu_a9aad3c7391d2416.png","permalink":"https://ziruiproject.github.io/post/materi-praktikum-4/","title":"Materi Praktikum 4"},{"content":"üìù Persiapan Alat Ngoding (Netbeans, VS Code, Intellij IDEA) Google Docs / MS Word Netbeans Jika kamu pakai Netbeans, maka bisa mengikuti cara berikut\nMenyalin Kode dari NetBeans Buka Netbeans, lalu copy kode yang diinginkan Buka website ini, kemudian paste kode tadi ke web tersebut Klik tombol Highlight Code Nanti dibawah akan muncul kode yang sudah diformat Lalu klik Copy to clipboard Buka Google Docs atau Word lalu paste atau CTRL + V Sekarang kode kamu dari Netbeans sudah rapi\nVSCode VSCode bisa langsung copy kode dengan rapi tanpa alat bantuan\n‚ö†Ô∏è Perhatikan Format warna \u0026amp; text akan mengikuti settingan dari VSCode, jadi perhatikan tema \u0026amp; settingan yang kamu gunakan\nMenyalin Kode dari VSCode Buka VSCode, copy kode yang diinginkan Langsung paste ke Google Docs atau Word Intellij IDEA Intellij IDEA juga bisa copy kode dengan rapi tanpa alat bantuan\n‚ö†Ô∏è Perhatikan Format warna akan mengikuti dari settingan Intellij IDEA\nMenyalin Kode dari Intellij IDEA Buka Intellij IDEA, copy kode yang diinginkan Langsung paste ke Google Docs atau Word ","date":"2025-04-11T16:25:24Z","image":"https://ziruiproject.github.io/post/copy-code-rapi-ke-docs/cover_hu_195f804fe910b130.png","permalink":"https://ziruiproject.github.io/post/copy-code-rapi-ke-docs/","title":"Copy Code Rapi ke Docs"},{"content":"Searching Algoritma searching adalah langkah-langkah atau instruksi untuk mencari sesuatu, biasanya adalah elemen di dalam array. Algoritma ini dibagi menjadi dua jenis, yaitu Linear dan Binary.\nDalam materi ini, ranah yang dibahas adalah dalam mencari elemen di dalam suatu array.\nLinear Search Pengertian Linear Search adalah metode untuk mencari data dengan cara mengecek elemen satu per satu dari posisi awal hingga akhir, sampai menemukan elemen yang dicari.\nVisualisasi Your browser doesn't support HTML5 video. Here is a link to the video instead. Jika Tidak Ditemukan\nYour browser doesn't support HTML5 video. Here is a link to the video instead. Jika Nilai Duplikat\nYour browser doesn't support HTML5 video. Here is a link to the video instead. Kode 1 2 3 4 5 6 7 8 public static int linearSearch(int[] array, int target) { for (int i = Õè0; i \u0026lt; array.length; i++) { if (array[i] == target) { return i; } } return -1; } Penjelasan Kode 1 public static int linearSearch(int[] array, int target) Method linearSearch akan menerima dua nilai, yaitu array dan target. Parameter array adalah data yang akan diproses (kotak-kotak dalam visualisasi sebelumnya). Kemudian target adalah nilai yang mau dicari.\n1 2 3 for (int i = Õè0; i \u0026lt; array.length; i++) { } Bagian ini akan mengiterasi array yang kita masukan sebelumnya, dari awal hingga akhir. Dalam visualisasi, kamu bisa lihat ada panah diatas kotak yang selalu bergerak. Itu dia wujud dari perulangan ini.\n1 2 3 if (array[i] == target) { } Bagian ini akan mengecek apakah nilai array sekarang sama dengan target yang dicari.\nJika tidak sama, maka program akan lanjut ke elemen / nilai selanjutnya. Kamu bisa lihat di visualisasi saat tanda panah berpindah ke kotak lain.\n1 2 3 if (array[i] == target) { return i; } Jika ternyata nilainya sama, artinya target yang dicari telah ditemukan di dalam array. Maka, program akan mengembalikan nilai index atau posisi target tersebut ada di mana.\n1 return -1; Jika semua nilai array sudah dicek sampai habis dan tidak ada nilai yang sama dengan target, maka program akan mengembalikan -1.\n-1 dipilih karena tidak ada array yang ber-index negatif.\n","date":"2025-04-11T16:06:37Z","image":"https://ziruiproject.github.io/post/materi-praktikum-3/cover_hu_999575a22e7c07a1.png","permalink":"https://ziruiproject.github.io/post/materi-praktikum-3/","title":"Materi Praktikum 3"},{"content":"üí° Petunjuk Umum Kerjakan menggunakan bahasa pemrograman Java Tambahkan komentar untuk menjelaskan program Tulislah kode dengan rapi Program harus memenuhi Kriteria Penyelesaian Jika pakai AI (ChatGPT, Deepseek, dll), nilai 0 üìò Istilah Umum Elemen: Nilai yang ada di dalam array. Contoh dalam array {5, 4, 3}, maka 5 saja adalah elemen, 4 saja adalah elemen, dan 3 saja adalah elemen Target: Nilai yang ingin dicari di dalam array Sorting Misterius 1 Perintah Buat program untuk mengurutkan array dengan cara mencari nilai terbesar atau terkecil, kemudian ditukar sampai array terurut secara Ascending.\nKriteria Penyelesaian Program ditulis dalam method bernama\n1 public static int[] SortingMisterius1(int[] arr) Program harus menampilkan setiap iterasi yang terjadi\nProgram harus menampilkan jumlah iterasi dan pertukaran (swap) yang terjadi\nProgram harus menampilkan array sebelum diurutkan dan setelah diurutkan\nProgram bisa dipanggil di Main Method\nSorting Misterius 2 Perintah Buat program untuk mengurutkan array dengan cara mengecek secara berpasangan setiap elemen di dalam array tersebut, kemudian ditukar sampai array terurut secara Descending.\nKriteria Penyelesaian Program ditulis dalam method bernama\n1 public static int[] SortingMisterius2(int[] arr) Program harus menampilkan setiap iterasi yang terjadi\nProgram harus menampilkan jumlah iterasi dan pertukaran (swap) yang terjadi\nProgram harus menampilkan array sebelum diurutkan dan setelah diurutkan\nProgram bisa dipanggil di Main Method\nSorting Misterius 3 Perintah Buat program untuk mengurutkan array dengan cara membandingkan dengan elemen di sebelah kirinya, kemudian ditukar sampai array terurut secara Ascending.\nKriteria Penyelesaian Program ditulis dalam method bernama\n1 public static int[] SortingMisterius3(int[] arr) Program harus menampilkan setiap iterasi yang terjadi\nProgram harus menampilkan jumlah iterasi dan pertukaran (swap) yang terjadi\nProgram harus menampilkan array sebelum diurutkan dan setelah diurutkan\nProgram bisa dipanggil di Main Method\nSearching Misterius 1 Perintah Buat program untuk mencari elemen dalam array dengan cara mengambil elemen di tengah, lalu membagi array menjadi dua bagian secara terus menerus hingga menemukan elemen yang dicari atau sampai tidak ditemukan.\nKriteria Penyelesaian Program ditulis dalam method bernama\n1 public static int[] SearchingMisterius(int[] arr, int target) Program harus dapat mencari elemen meskipun array tidak terurut\nProgram harus menampilkan array yang sedang diproses di setiap iterasi\nProgram harus menampilkan jumlah iterasi yang terjadi\nProgram harus menampilkan indeks elemen jika ditemukan, dan -1 jika tidak ditemukan\nProgram bisa dipanggil di Main Method\nSearching Misterius 2 Perintah Buat program untuk mencari elemen dalam array dengan cara mencari elemen satu per satu dari index pertama hingga akhir sampai menemukan elemen yang dicari atau sampai tidak ditemukan.\nKriteria Penyelesaian Program ditulis dalam method bernama\n1 public static double[] SearchingMisterius(double[] arr, double target) Program harus dapat mencari elemen meskipun array tidak terurut\nProgram harus menampilkan pesan:\n\u0026quot;Elemen tidak sama dengan target\u0026quot; saat elemen yang dicek bukan target \u0026quot;Elemen sama dengan target\u0026quot; saat elemen yang dicek adalah target Program harus menampilkan jumlah iterasi yang terjadi\nProgram harus menampilkan indeks elemen jika ditemukan, dan -1 jika tidak ditemukan\nProgram bisa dipanggil di Main Method\nüóìÔ∏è Deadline Tugas ini harus dikumpulkan paling lambat pada:\nüìÖ Hari/Tanggal: Senin, 14 April 2025\n‚è∞ Pukul: 18:00 WIB\nPengumpulan dilakukan melalui MyITS Classroom\n‚õî Catatan: Tugas yang terlambat, hanya dapat nilai maksimal 50 saja.\n","date":"2025-04-10T11:04:59Z","image":"https://ziruiproject.github.io/post/tugas-pertemuan-ke-3/cover_hu_864092bd58b27e63.png","permalink":"https://ziruiproject.github.io/post/tugas-pertemuan-ke-3/","title":"Tugas Pertemuan Ke 3"}]